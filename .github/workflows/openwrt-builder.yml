name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120  # 设置超时时间

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Verify system tools
      run: |
        echo "=== Core Tools Check ==="
        git --version || exit 1
        gcc --version || exit 1
        make --version || exit 1
        python2 --version || exit 1
        python3 --version || exit 1

    - name: Setup Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* \
          /usr/share/dotnet \
          /usr/local/lib/android \
          /opt/ghc \
          /opt/hostedtoolcache/CodeQL
        
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install --no-install-recommends \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext \
          gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 \
          libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev \
          libmpfr-dev libncurses5-dev libncursesw5-dev libpython2-dev libpython3-dev \
          libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip \
          p7zip-full patch pkgconf python2 python3 python3-pyelftools python3-setuptools \
          qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl \
          unzip vim wget xmlto xxd zlib1g-dev

        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown -R $USER:$GROUPS /workdir

    - name: Clone Source
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sfn /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Repository Health Check
      working-directory: /workdir/openwrt
      run: |
        [ -d .git ] || { echo "Git repository missing"; exit 1; }
        [ -f feeds.conf.default ] || { echo "Default feeds missing"; exit 1; }

    - name: Apply Custom Feeds
      working-directory: $GITHUB_WORKSPACE
      run: |
        [ -f "$FEEDS_CONF" ] && cp "$FEEDS_CONF" openwrt/feeds.conf.default
        chmod +x "$DIY_P1_SH"
        cd openwrt && ../"$DIY_P1_SH"

    - name: Update Feeds
      working-directory: $GITHUB_WORKSPACE/openwrt
      run: ./scripts/feeds update -a

    - name: Install Feeds
      working-directory: $GITHUB_WORKSPACE/openwrt
      run: ./scripts/feeds install -a

    - name: Apply Configuration
      working-directory: $GITHUB_WORKSPACE
      run: |
        [ -d files ] && cp -r files openwrt/files
        [ -f "$CONFIG_FILE" ] && cp "$CONFIG_FILE" openwrt/.config
        chmod +x "$DIY_P2_SH"
        cd openwrt && ../"$DIY_P2_SH"

    - name: Validate Configuration
      working-directory: $GITHUB_WORKSPACE/openwrt
      run: |
        [ -f .config ] || { echo "Missing .config"; exit 1; }
        grep -q 'CONFIG_TARGET.*=y' .config || { echo "Invalid device config"; exit 1; }

    - name: Download Packages
      working-directory: $GITHUB_WORKSPACE/openwrt
      run: |
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -delete

    - name: Pre-Compile Check
      run: |
        echo "=== Disk Space ==="
        df -h
        echo "=== Workspace Size ==="
        du -sh $GITHUB_WORKSPACE

    - name: Compile Firmware
      working-directory: $GITHUB_WORKSPACE/openwrt
      timeout-minutes: 90  # 单独设置编译超时
      run: |
        echo "Using $(nproc) threads"
        make -j$(nproc) V=s || make -j1 V=s
        echo "DEVICE_NAME=_$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Package Artifacts
      if: success() && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/targets
        rm -rf ./*/packages
        echo "FIRMWARE_PATH=$(ls -d $(pwd)/*/*)" >> $GITHUB_ENV

    - name: Upload Binaries
      if: env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Bin-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
        path: $GITHUB_WORKSPACE/openwrt/bin

    - name: Upload Firmware
      if: env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt-Firmware-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Create Release
      if: env.UPLOAD_RELEASE == 'true'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ env.FILE_DATE }}"
        files: |
          ${{ env.FIRMWARE_PATH }}/*.bin
          ${{ env.FIRMWARE_PATH }}/*.img

    - name: Cleanup Workflows
      uses: Mattraks/delete-workflow-runs@v2
      with:
        keep_minimum_runs: 3  # 保留最近3次运行
        retain_days: 7        # 保留7天内的运行

    - name: Cleanup Releases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      with:
        keep_latest: 5       # 保留最新5个发布
        delete_tags: false    # 保留Git标签
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
